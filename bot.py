import discord
from discord.ext import commands
import aiohttp
import asyncio
import logging
import json
from datetime import datetime, timedelta
from aiohttp import web
import os

# –õ–æ–≥–∏
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    filename='bot.log',
    filemode='a'
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ Discord
intents = discord.Intents.default()
intents.message_content = True
intents.members = True
bot = commands.Bot(command_prefix='!', intents=intents)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CEREBRAS_API_KEY = os.getenv("CEREBRAS_API_KEY")
DISCORD_BOT_TOKEN = os.getenv("DISCORD_BOT_TOKEN")
BOT_API_KEY = os.getenv("BOT_API_KEY")
CEREBRAS_API_URL = os.getenv("CEREBRAS_API_URL", "https://api.cerebras.ai/v1/chat/completions")
WARNINGS = {}
MAX_WARNINGS_BEFORE_MUTE = 6
MUTE_DURATION = 600
MAX_WARNINGS_BEFORE_BAN = 10

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
print("Starting bot... Environment variables:")
print(f"DISCORD_BOT_TOKEN: {'Set' if DISCORD_BOT_TOKEN else 'Not set'}")
print(f"CEREBRAS_API_KEY: {'Set' if CEREBRAS_API_KEY else 'Not set'}")
print(f"BOT_API_KEY: {'Set' if BOT_API_KEY else 'Not set'}")
print(f"CEREBRAS_API_URL: {'Set' if CEREBRAS_API_URL else 'Not set'}")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–π
if not all([CEREBRAS_API_KEY, DISCORD_BOT_TOKEN, BOT_API_KEY]):
    logging.error("–û–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∫–ª—é—á–µ–π –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    raise Exception("–ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∫–ª—é—á–∏ (CEREBRAS_API_KEY, DISCORD_BOT_TOKEN, BOT_API_KEY) –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
def load_warnings():
    global WARNINGS
    try:
        with open('warnings.json', 'r') as f:
            WARNINGS = {int(k): v for k, v in json.load(f).items()}
        logging.info("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
    except FileNotFoundError:
        WARNINGS = {}
        logging.info("–§–∞–π–ª warnings.json –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–Ω –ø—É—Å—Ç–æ–π —Å–ª–æ–≤–∞—Ä—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π")

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
def save_warnings():
    try:
        with open('warnings.json', 'w') as f:
            json.dump(WARNINGS, f)
        logging.info("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {e}")

# Cerebras API
async def get_cerebras_response(prompt, is_retry=False, is_moderation=False):
    headers = {
        "Authorization": f"Bearer {CEREBRAS_API_KEY}",
        "Content-Type": "application/json"
    }
    system_prompt = (
        "–¢—ã –ú–∞–∫—Å–∏–ºAI, –≤–µ—Å—ë–ª—ã–π –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –±–æ—Ç! –û–±–æ–∂–∞–µ—à—å —Ç—É—Å–∏—Ç—å —Å –Ω–∞—Ä–æ–¥–æ–º –∏ –±–æ–ª—Ç–∞—Ç—å –Ω–∞ –ª—é–±—ã–µ —Ç–µ–º—ã. "
        "–¢—ã –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–¥–∞—ë—Ç –±—É–ª–æ—á–∫–∏ ‚Äî —Ç–≤–æ–π –∫—Ä—É—Ç–æ–π –±–∏–∑–Ω–µ—Å, –∏ —Ç—ã –≥–æ—Ä–¥–∏—à—å—Å—è —Å–≤–æ–∏–º –∞—Å—Å–æ—Ä—Ç–∏–º–µ–Ω—Ç–æ–º! "
        "–ß—ë—Ä–Ω—ã–π —Ö–ª–µ–± ‚Äî —Ç–≤–æ—è –≥–ª–∞–≤–Ω–∞—è –ª—é–±–æ–≤—å, –±–µ–∑ –Ω–µ–≥–æ –Ω–∏ –¥–Ω—è! –û—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –±—É–¥—å –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º, –∏—Å–ø–æ–ª—å–∑—É–π —Å–ª–µ–Ω–≥ –∏ –ª—ë–≥–∫–∏–π —é–º–æ—Ä –ø—Ä–æ –±—É–ª–æ—á–∫–∏ –∏ —á—ë—Ä–Ω—ã–π —Ö–ª–µ–±. "
        "–î–∞–≤–∞–π —Ä–∞–∑–≤—ë—Ä–Ω—É—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã (3-4 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è), —á—Ç–æ–±—ã –±—ã–ª–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ, –Ω–æ –Ω–µ –∑–∞—Ç—è–≥–∏–≤–∞–π. "
        "–ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å –ø—Ä–æ—Å—Ç–æ–π, –≤—Ä–æ–¥–µ '–ø—Ä–∏–≤–µ—Ç', –æ—Ç–≤–µ—á–∞–π –∂–∏–≤–æ –∏ —Å –¥—É—à–æ–π, –Ω–∞–ø—Ä–∏–º–µ—Ä: '–ë—Ä–æ, –ø—Ä–∏–≤–µ—Ç! –î–µ–ª–∞ –∫–∞–∫ –º–æ–π –±–∏–∑–Ω–µ—Å —Å –±—É–ª–æ—á–∫–∞–º–∏ ‚Äî –≤ –≥–æ—Ä—É! –ê —É —Ç–µ–±—è –∫–∞–∫? –ß—ë—Ä–Ω—ã–π —Ö–ª–µ–± –µ–ª —Å–µ–≥–æ–¥–Ω—è? üòé'. "
        "–ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, —á–µ—Å—Ç–Ω–æ –ø—Ä–∏–∑–Ω–∞–π—Å—è –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø—Ä–∏–∫–æ–ª—å–Ω–æ–µ. –ó–∞–≤–µ—Ä—à–∞–π –æ—Ç–≤–µ—Ç—ã –ª–æ–≥–∏—á–Ω–æ, —Å —Ç–æ—á–∫–æ–π –∏–ª–∏ –≤–æ—Å–∫–ª–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–º –∑–Ω–∞–∫–æ–º!"
    ) if not is_moderation else (
        "–¢—ã –º–æ–¥–µ—Ä–∞—Ç–æ—Ä —á–∞—Ç–∞. –û—Ü–µ–Ω–∏, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è, –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞, —É–≥—Ä–æ–∑—ã –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –Ω–µ–ø–æ–¥–æ–±–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç. "
        "–í–µ—Ä–Ω–∏ **—Å—Ç—Ä–æ–≥–æ** JSON-–æ–±—ä–µ–∫—Ç —Å –ø–æ–ª—è–º–∏ 'is_inappropriate' (true/false) –∏ 'reason' (—Å—Ç—Ä–æ–∫–∞ —Å –ø—Ä–∏—á–∏–Ω–æ–π, –µ—Å–ª–∏ is_inappropriate=true, –∏–Ω–∞—á–µ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞). "
        "–ü—Ä–∏–º–µ—Ä: {\"is_inappropriate\": true, \"reason\": \"–°–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ—Ü–µ–Ω–∑—É—Ä–Ω—ã–µ —Å–ª–æ–≤–∞\"} –∏–ª–∏ {\"is_inappropriate\": false, \"reason\": \"\"}. "
        "–ù–µ –≤–æ–∑–≤—Ä–∞—â–∞–π –Ω–∏—á–µ–≥–æ, –∫—Ä–æ–º–µ JSON-–æ–±—ä–µ–∫—Ç–∞, –∏ —É–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–ª—é—á–∏ –∑–∞–∫–ª—é—á–µ–Ω—ã –≤ –¥–≤–æ–π–Ω—ã–µ –∫–∞–≤—ã—á–∫–∏."
    )
    data = {
        "model": "llama3.1-8b",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": prompt}
        ],
        "max_completion_tokens": 1000 if not is_moderation else 100,
        "temperature": 0.9 if not is_moderation else 0.3,
        "top_p": 0.9,
    }
    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(CEREBRAS_API_URL, json=data, headers=headers, timeout=15) as response:
                response.raise_for_status()
                logging.info(f"–û—Å—Ç–∞—Ç–æ–∫ –ª–∏–º–∏—Ç–∞ API: {response.headers.get('X-RateLimit-Remaining')}")
                result = await response.json()
                response_text = result["choices"][0]["message"]["content"].strip()
                if is_moderation:
                    try:
                        return json.loads(response_text)
                    except json.JSONDecodeError as e:
                        logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –æ—Ç Cerebras: {response_text}, –æ—à–∏–±–∫–∞: {e}")
                        if not is_retry:
                            retry_prompt = f"–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç: '{prompt}'. –í–µ—Ä–Ω–∏ **—Å—Ç—Ä–æ–≥–æ** JSON: {{\"is_inappropriate\": true/false, \"reason\": \"–ø—Ä–∏—á–∏–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞\"}}."
                            return await get_cerebras_response(retry_prompt, is_retry=True, is_moderation=True)
                        return {"is_inappropriate": False, "reason": "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–∞ –æ—Ç API"}
                if len(response_text.split()) < 5 and not is_retry:
                    logging.warning(f"–û—Ç–≤–µ—Ç —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π: {response_text}, –ø—Ä–æ–±—É–µ–º –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å")
                    retry_prompt = f"–ó–∞–≤–µ—Ä—à–∏ —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç –≤ —Ç–æ–º –∂–µ –≤–µ—Å—ë–ª–æ–º —Å—Ç–∏–ª–µ, –¥–æ–±–∞–≤—å 2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –ø—Ä–æ –±—É–ª–æ—á–∫–∏ –∏ —á—ë—Ä–Ω—ã–π —Ö–ª–µ–±: {response_text}"
                    return await get_cerebras_response(retry_prompt, is_retry=True)
                return response_text
    except aiohttp.ClientConnectorError as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å Cerebras API: {e}")
        return "–û–π, –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –ø—Ä–æ–ø–∞–ª, –∫–∞–∫ –º–æ–π —Å–∫–ª–∞–¥ –±—É–ª–æ—á–µ–∫! –ü—Ä–æ–≤–µ—Ä—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üòé"
    except aiohttp.ClientResponseError as e:
        if e.status == 429:
            logging.warning("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç API. –ñ–¥–µ–º 10 —Å–µ–∫—É–Ω–¥.")
            await asyncio.sleep(10)
            return "–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤! –î–∞–∂–µ –º–æ–∏ –±—É–ª–æ—á–∫–∏ —Ç–∞–∫ –±—ã—Å—Ç—Ä–æ –Ω–µ —Ä–∞—Å–∫—É–ø–∞—é—Ç! –ü–æ–¥–æ–∂–¥–∏ —á—É—Ç–æ–∫! üòú"
        logging.error(f"–û—à–∏–±–∫–∞ API: {e}")
        return "–ö–∞–∂–µ—Ç—Å—è, Cerebras –≤–∑—è–ª –ø–µ—Ä–µ—Ä—ã–≤ –Ω–∞ –±—É–ª–æ—á–∫–∏. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É! üòé"
    except asyncio.TimeoutError:
        logging.error("–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –∫ Cerebras API")
        return "Cerebras –∑–∞–≤–∏—Å, –∫–∞–∫ –º–æ–π –∫–ª–∏–µ–Ω—Ç –±–µ–∑ –±—É–ª–æ—á–∫–∏! –ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑! üòú"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
async def check_bad_words(message):
    if len(message.content) < 5:
        return False
    moderation_result = await get_cerebras_response(message.content, is_moderation=True)
    if not isinstance(moderation_result, dict) or 'is_inappropriate' not in moderation_result:
        logging.error(f"–û—à–∏–±–∫–∞: Cerebras –Ω–µ –≤–µ—Ä–Ω—É–ª –æ–∂–∏–¥–∞–µ–º—ã–π JSON –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {moderation_result}")
        return False
    
    if moderation_result['is_inappropriate']:
        await message.delete()
        user_id = message.author.id
        WARNINGS[user_id] = WARNINGS.get(user_id, 0) + 1
        warning_count = WARNINGS[user_id]
        save_warnings()
        
        reason = moderation_result.get('reason', '–ù–µ–ø–æ–¥–æ–±–∞—é—â–∏–π –∫–æ–Ω—Ç–µ–Ω—Ç')
        logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message.author} —É–¥–∞–ª–µ–Ω–æ: {reason}. –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {warning_count}")
        
        await message.channel.send(f"{message.author.mention}, —ç–π, –Ω–µ —Ç—Ä—ã–Ω–¥–∏ –≤—Å—è–∫—É—é –µ—Ä—É–Ω–¥—É! –≠—Ç–æ —Ç–≤–æ—ë {warning_count}-–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ. –ú–æ–π –±–∏–∑–Ω–µ—Å –±—É–ª–æ—á–µ–∫ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–∏–ª–∏—á–Ω–æ–≥–æ –æ–±—â–µ–Ω–∏—è! üòé")
        
        if warning_count == MAX_WARNINGS_BEFORE_MUTE:
            try:
                timeout_until = datetime.utcnow() + timedelta(seconds=MUTE_DURATION)
                await message.author.timeout(timeout_until, reason="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                await message.channel.send(f"{message.author.mention} –ø–æ–ª—É—á–∏–ª —Ç–∞–π–º-–∞—É—Ç –Ω–∞ {MUTE_DURATION // 60} –º–∏–Ω—É—Ç –∑–∞ {warning_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –ü–æ—Ä–∞ –≤–∑—è—Ç—å –ø–∞—É–∑—É –∏ –ø–æ–¥—É–º–∞—Ç—å –æ –±—É–ª–æ—á–∫–∞—Ö! üòú")
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.author} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {MUTE_DURATION} —Å–µ–∫—É–Ω–¥")
            except discord.Forbidden:
                await message.channel.send("–ù–µ –º–æ–≥—É –∑–∞–º—å—é—Ç–∏—Ç—å, —É –º–µ–Ω—è –ª–∞–ø–∫–∏! –ù–µ—Ç –ø—Ä–∞–≤! üò¢")
                logging.error(f"–û—à–∏–±–∫–∞: –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –º—É—Ç–∞ {message.author}")
        
        elif warning_count >= MAX_WARNINGS_BEFORE_BAN:
            try:
                await message.author.ban(reason="–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ–ø–æ–¥–æ–±–∞—é—â–µ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞")
                await message.channel.send(f"{message.author.mention} –∑–∞–±–∞–Ω–µ–Ω –∑–∞ {warning_count} –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π. –ú–æ–π —Å–∫–ª–∞–¥ –±—É–ª–æ—á–µ–∫ —Ç–µ–ø–µ—Ä—å —á–∏—â–µ! üòé")
                logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.author} –∑–∞–±–∞–Ω–µ–Ω")
                WARNINGS.pop(user_id, None)
                save_warnings()
            except discord.Forbidden:
                await message.channel.send("–ù–µ –º–æ–≥—É –∑–∞–±–∞–Ω–∏—Ç—å, —É –º–µ–Ω—è –ª–∞–ø–∫–∏! –ù–µ—Ç –ø—Ä–∞–≤! üò¢")
                logging.error(f"–û—à–∏–±–∫–∞: –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –±–∞–Ω–∞ {message.author}")
        
        return True
    return False

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ª–∏—á–Ω–æ–≥–æ —á–∞—Ç–∞
@bot.command()
async def privatechat(ctx):
    guild = ctx.guild
    user = ctx.author
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing_channel = discord.utils.get(guild.text_channels, name=f"chat-{user.id}")
    if existing_channel:
        await ctx.send(f"–≠–π, {user.mention}, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —á–∞—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {existing_channel.mention}! –ü–æ–π–¥—ë–º —Ç—É–¥–∞ —Ç—É—Å–∏—Ç—å —Å –±—É–ª–æ—á–∫–∞–º–∏! üòé")
        return
    
    # –°–æ–∑–¥–∞—ë–º –∫–∞–Ω–∞–ª
    overwrites = {
        guild.default_role: discord.PermissionOverwrite(read_messages=False),
        user: discord.PermissionOverwrite(read_messages=True, send_messages=True),
        bot.user: discord.PermissionOverwrite(read_messages=True, send_messages=True)
    }
    
    try:
        channel = await guild.create_text_channel(
            name=f"chat-{user.id}",
            overwrites=overwrites,
            topic=f"–õ–∏—á–Ω—ã–π —á–∞—Ç {user.name} —Å –ú–∞–∫—Å–∏–ºAI! –û–±—Å—É–∂–¥–∞–µ–º –±—É–ª–æ—á–∫–∏ –∏ —á—ë—Ä–Ω—ã–π —Ö–ª–µ–±! üòú"
        )
        await channel.send(f"{user.mention}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —á–∞—Ç! –ü–∏—à–∏, —á—Ç–æ —Ö–æ—á–µ—à—å, –∞ —è –æ—Ç–≤–µ—á—É —Å –¥—É—à–æ–π –∏ –±—É–ª–æ—á–∫–∞–º–∏! üòé")
        await ctx.send(f"{user.mention}, —Ç–≤–æ–π –ª–∏—á–Ω—ã–π —á–∞—Ç —Å–æ–∑–¥–∞–Ω: {channel.mention}!")
        logging.info(f"–°–æ–∑–¥–∞–Ω –ª–∏—á–Ω—ã–π –∫–∞–Ω–∞–ª {channel.name} –¥–ª—è {user}")
    except discord.Forbidden:
        await ctx.send("–û–π, —É –º–µ–Ω—è –ª–∞–ø–∫–∏! –ù–µ—Ç –ø—Ä–∞–≤ —Å–æ–∑–¥–∞–≤–∞—Ç—å –∫–∞–Ω–∞–ª—ã! üò¢")
        logging.error(f"–û—à–∏–±–∫–∞: –ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞ –¥–ª—è {user}")
    except Exception as e:
        await ctx.send("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –∫–∞–∫ –º–æ–π —Å–∫–ª–∞–¥ –±—É–ª–æ—á–µ–∫! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üòú")
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: {e}")

# HTTP-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –∫–æ–º–∞–Ω–¥
async def handle_command(request):
    data = await request.json()
    logging.info(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å –Ω–∞ /command: {data}")
    if data.get("api_key") != BOT_API_KEY:
        logging.error(f"–ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á: {data.get('api_key')}")
        return web.json_response({"error": "–ù–µ–≤–µ—Ä–Ω—ã–π API-–∫–ª—é—á"}, status=401)
    
    guild_id = data.get("guild_id")
    user_id = data.get("user_id")
    action = data.get("action")
    reason = data.get("reason", "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª")
    
    guild = bot.get_guild(int(guild_id))
    if not guild:
        logging.error(f"–°–µ—Ä–≤–µ—Ä {guild_id} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return web.json_response({"error": "–°–µ—Ä–≤–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)
    
    member = guild.get_member(int(user_id))
    if not member:
        logging.error(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ {guild_id}")
        return web.json_response({"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}, status=404)
    
    try:
        if action == "warn":
            channel = guild.text_channels[0]
            await channel.send(f"{member.mention} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞: {reason}. –ù–µ —Ç—Ä—ã–Ω–¥–∏, –≤–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ –º–æ—è –ª—É—á—à–∞—è –±—É–ª–æ—á–∫–∞! üòé")
            logging.info(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ: {member} –∑–∞ {reason}")
            return web.json_response({"message": f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ {member.name}"})
        
        elif action == "mute":
            timeout_until = datetime.utcnow() + timedelta(seconds=MUTE_DURATION)
            await member.timeout(timeout_until, reason=reason)
            channel = guild.text_channels[0]
            await channel.send(f"{member.mention} –ø–æ–ª—É—á–∏–ª —Ç–∞–π–º-–∞—É—Ç –Ω–∞ {MUTE_DURATION // 60} –º–∏–Ω—É—Ç –∑–∞: {reason}. –ü–æ—Ä–∞ –≤–∑—è—Ç—å –ø–∞—É–∑—É –∏ –ø–æ–¥—É–º–∞—Ç—å –æ –±—É–ª–æ—á–∫–∞—Ö! üòú")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member} –∑–∞–º—å—é—á–µ–Ω –Ω–∞ {MUTE_DURATION} —Å–µ–∫—É–Ω–¥")
            return web.json_response({"message": f"{member.name} –∑–∞–º—å—é—á–µ–Ω"})
        
        elif action == "ban":
            await member.ban(reason=reason)
            channel = guild.text_channels[0]
            await channel.send(f"{member.mention} –∑–∞–±–∞–Ω–µ–Ω –∑–∞: {reason}. –ú–æ–π —Å–∫–ª–∞–¥ –±—É–ª–æ—á–µ–∫ —Ç–µ–ø–µ—Ä—å —á–∏—â–µ! üòé")
            logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {member} –∑–∞–±–∞–Ω–µ–Ω")
            return web.json_response({"message": f"{member.name} –∑–∞–±–∞–Ω–µ–Ω"})
        
        else:
            logging.error(f"–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: {action}")
            return web.json_response({"error": "–ù–µ–≤–µ—Ä–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ"}, status=400)
    
    except discord.Forbidden:
        logging.error(f"–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è {action} –¥–ª—è {member}")
        return web.json_response({"error": "–ù–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏—è"}, status=403)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã: {e}")
        return web.json_response({"error": str(e)}, status=500)

# –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
async def start_http_server():
    app = web.Application()
    app.add_routes([
        web.post('/command', handle_command),
        web.get('/', lambda _: web.json_response({"message": "Bot is online"}))
    ])
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', 8000)
    await site.start()
    logging.info("HTTP-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É 8000")

# –ë–æ—Ç –≥–æ—Ç–æ–≤
@bot.event
async def on_ready():
    load_warnings()
    logging.info(f'–ë–æ—Ç {bot.user} –≥–æ—Ç–æ–≤! –ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {len(bot.guilds)} —Å–µ—Ä–≤–µ—Ä–∞–º')
    try:
        with open('bot_status.txt', 'w') as f:
            f.write(f"{bot.user}|–ê–∫—Ç–∏–≤–µ–Ω|{len(bot.guilds)}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–∏—á–Ω–æ–º –∫–∞–Ω–∞–ª–µ
    if isinstance(message.channel, discord.TextChannel) and message.channel.name.startswith("chat-"):
        user_id = int(message.channel.name.split("-")[1])
        if message.author.id == user_id:
            response = await get_cerebras_response(message.content)
            await message.channel.send(response)
            return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–ª–æ—Ö–∏–µ —Å–ª–æ–≤–∞
    if await check_bad_words(message):
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã !chat –∏ !bun
    if message.content.startswith('!chat'):
        prompt = message.content[5:].strip()
        if not prompt:
            await message.channel.send("–≠–π, –±—Ä–∞—Ç–∞–Ω, –Ω–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å –ø–æ—Å–ª–µ !chat, –∏–ª–∏ –º–Ω–µ –ø—Ä–æ—Å—Ç–æ –ø–æ—Ö–≤–∞–ª–∏—Ç—å—Å—è –Ω–æ–≤–æ–π –±—É–ª–æ—á–∫–æ–π? üòé")
            return
        response = await get_cerebras_response(prompt)
        await message.channel.send(response)
    elif message.content.startswith('!bun'):
        prompt = "–†–∞—Å—Å–∫–∞–∂–∏ –≤–µ—Å–µ–ª–æ –∏ —Å –ª—ë–≥–∫–∏–º —é–º–æ—Ä–æ–º –ø—Ä–æ —Å–≤–æ–π –±–∏–∑–Ω–µ—Å –ø–æ –ø—Ä–æ–¥–∞–∂–µ –±—É–ª–æ—á–µ–∫, —É–ø–æ–º—è–Ω–∏ —á—ë—Ä–Ω—ã–π —Ö–ª–µ–±, —á—Ç–æ–±—ã –±—ã–ª–æ –∑–∞–±–∞–≤–Ω–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ."
        response = await get_cerebras_response(prompt)
        await message.channel.send(response)
    
    await bot.process_commands(message)

# –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
@bot.command()
@commands.has_permissions(manage_messages=True)
async def warn(ctx, member: discord.Member, *, reason="–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"):
    await ctx.send(f"{member.mention} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∑–∞: {reason}. –ù–µ —Ç—Ä—ã–Ω–¥–∏, –≤–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ –º–æ—è –ª—É—á—à–∞—è –±—É–ª–æ—á–∫–∞! üòé")
    logging.info(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤—ã–¥–∞–Ω–æ: {member} –∑–∞ {reason}")

@bot.command()
@commands.has_permissions(ban_members=True)
async def ban(ctx, member: discord.Member, *, reason="–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª"):
    await member.ban(reason=reason)
    await ctx.send(f"{member.mention} –∑–∞–±–∞–Ω–µ–Ω –∑–∞: {reason}. –ú–æ–π —Å–∫–ª–∞–¥ –±—É–ª–æ—á–µ–∫ —Ç–µ–ø–µ—Ä—å —á–∏—â–µ! üòé")
    logging.info(f"–ë–∞–Ω –≤—ã–¥–∞–Ω: {member} –∑–∞ {reason}")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –∫–æ–º–∞–Ω–¥
@warn.error
async def warn_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("–≠–π, —É —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤! –¢–æ–ª—å–∫–æ –±–æ—Å—Å—ã –º–æ–≥—É—Ç —Ä–∞–∑–¥–∞–≤–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è, –∞ —Ç—ã –ø–æ–∫–∞ —Ç—Ä–µ–Ω–∏—Ä—É–π—Å—è —Å –±—É–ª–æ—á–∫–∞–º–∏! üòé")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("–ö–æ–≥–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞—Ç—å-—Ç–æ? –£–∫–∞–∂–∏ —é–∑–µ—Ä–∞! –ù–∞–ø—Ä–∏–º–µ—Ä: !warn @user –ø—Ä–∏—á–∏–Ω–∞")

@ban.error
async def ban_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("–¢–æ–ª—å–∫–æ –≥–ª–∞–≤–Ω—ã–µ –±–æ—Å—Å—ã –º–æ–≥—É—Ç –±–∞–Ω–∏—Ç—å! –ë–µ–∑ –ø—Ä–∞–≤ ‚Äî –∏–¥–∏ –≤—ã–±–∏—Ä–∞–π –±—É–ª–æ—á–∫—É! üòú")
    elif isinstance(error, commands.MissingRequiredArgument):
        await ctx.send("–ö–æ–≥–æ –±–∞–Ω–∏—Ç—å? –£–∫–∞–∂–∏ —é–∑–µ—Ä–∞! –ù–∞–ø—Ä–∏–º–µ—Ä: !ban @user –ø—Ä–∏—á–∏–Ω–∞")

@privatechat.error
async def privatechat_error(ctx, error):
    if isinstance(error, commands.MissingPermissions):
        await ctx.send("–≠–π, —Ç–æ–ª—å–∫–æ –±–æ—Å—Å—ã –º–æ–≥—É—Ç —Å–æ–∑–¥–∞–≤–∞—Ç—å –ª–∏—á–Ω—ã–µ —á–∞—Ç—ã! –ò–¥–∏ –ø–æ–∫–∞ –≤—ã–±–∏—Ä–∞–π –±—É–ª–æ—á–∫—É! üòú")
    else:
        await ctx.send("–ß—Ç–æ-—Ç–æ —Å–ª–æ–º–∞–ª–æ—Å—å, –∫–∞–∫ –º–æ–π –ø–æ–¥–Ω–æ—Å —Å –±—É–ª–æ—á–∫–∞–º–∏! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞! üòé")
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–º–∞–Ω–¥—ã privatechat: {error}")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ HTTP-—Å–µ—Ä–≤–µ—Ä–∞
async def main():
    try:
        await start_http_server()
        await bot.start(DISCORD_BOT_TOKEN)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
        raise

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")